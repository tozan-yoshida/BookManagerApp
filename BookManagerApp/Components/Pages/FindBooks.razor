@page "/findBooks"
@inject BookManagerApp.Data.BookManagerAppContext DB
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using BookManagerApp.Data
@using BookManagerApp.Components.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.IdentityModel.Tokens
@using IgniteUI.Blazor.Controls


<PageTitle>図書検索</PageTitle>
<AuthorizeView>
    <Authorized>

        <h1>図書検索</h1>

        <h4>登録済みの図書を検索できます</h4>
        <hr />
        <div class="form">
            <div class="row">
                <p>
                    <label class="label01">書籍名</label>
                    <input id="title" type="text" @bind="@title" />
                </p>
                <p>
                    <label class="label01">著者</label>
                    <input type="text" id="author" @bind="@author" />
                </p>
                <p>
                    <label class="label01">出版社</label>
                    <input type="text" id="publisher" @bind="@publisher" />
                </p>
                <p>
                    <button class="btn btn-primary" @onclick="SearchBooks">検索</button>
                </p>
            </div>
        </div>
        
        <div class="table_box">
            <table class="table">
                <thead>
                    <tr>
                        <th class="center">編集</th>
                        <th class="center">削除</th>
                        <th>書籍名</th>
                        <th>著者</th>
                        <th>出版社</th>
                        <th>登録日時</th>
                        <th>登録ユーザー</th>
                        <th>更新日時</th>
                        <th>更新ユーザー</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Books)
                    {
                        <tr>
                            <td class="center">
                                <button class="btn btn-primary" @onclick="(e => GoToEdit(item.BookId))">編集</button>
                            </td>
                            <td class="center">
                                <button type="button" class="btn btn-primary" @onclick="(e => showDialog(item.BookId))">削除</button>
                            </td>
                            <td>
                                <a href="/detailBook?bookid=@item.BookId">@item.Title</a>
                            </td>
                            <td>
                                @item.Author
                            </td>
                            <td>
                                @item.Publisher
                            </td>
                            <td>
                                @item.RegistDate
                            </td>
                            <td>
                                @item.RegistUser
                            </td>
                            <td>
                                @item.UpdateDate
                            </td>
                            <td>
                                @item.UpdateUser
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
    </Authorized>
    <NotAuthorized>
        ログインしてください
    </NotAuthorized>
</AuthorizeView>

<ConfirmDialog @ref="confirmation"
               Title="確認"
               Message="図書情報を削除しますか?"
               OKButtonCaption="はい"
               CancelButtonCaption="いいえ"
               ActionSelected="ActionSelected">
</ConfirmDialog>

@code {
    private string? title;
    private string? author;
    private string? publisher;
    private int selectBookId;

    private bool result;
    private ConfirmDialog confirmation;


    [SupplyParameterFromForm]
    public IList<Book> Books { get; set; }



    protected override void OnInitialized()
    {
        Books = DB.Book.ToList();

        if (Books is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task SearchBooks()
    {
        if (title.IsNullOrEmpty() && author.IsNullOrEmpty() && publisher.IsNullOrEmpty())
        {
            Books = await DB.Book.ToListAsync();
            return;
        }
        Books = await DB.Book.Where(m => (m.Title.Contains(title) || title.IsNullOrEmpty())
                                                && (m.Author.Contains(author) || author.IsNullOrEmpty())
                                                && (m.Publisher.Contains(publisher) || publisher.IsNullOrEmpty())).ToListAsync();
    }

    protected void GoToEdit(int bookId)
    {
        NavigationManager.NavigateTo($"/editBook?bookid={bookId}");
    }

    private async Task ActionSelected(bool dialogResult)
    {
        try
        {
            if (!dialogResult)
                return;

            Book removeBook = await DB.Book.FirstOrDefaultAsync(m => m.BookId == selectBookId);
            if(removeBook is null)
            {
                return;
            }
            DB.Book.Remove(removeBook);
            await DB.SaveChangesAsync();
            Books = await DB.Book.ToListAsync();
        }catch(Exception e)
        {
            
        }
    }

    private async Task showDialog(int bookId)
    {
        selectBookId = bookId;
        await confirmation.ShowDialog();
    }
}